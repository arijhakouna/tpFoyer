pipeline {
    agent any

    environment {
        VERSION = ''
        TAG_VERSION = ''
        STACK_NAME = 'tpfoyer'
    }

    stages {
        stage("Checkout & Tagging") {
            steps {
                echo "Checking out code and creating tag..."
                script {
                    git branch: 'master',
                        url: 'https://github.com/arijhakouna/tpFoyer.git'
                    
                    def baseVersion = "1.0.1-SNAPSHOT"
                    def fullVersion = "${baseVersion}-${env.BUILD_NUMBER}"
                    
                    echo "Base version: ${baseVersion}"
                    echo "Full version: ${fullVersion}"
                    echo "Build number: ${env.BUILD_NUMBER}"
                    
                    sh "mvn versions:set -DnewVersion=${fullVersion} -DgenerateBackupPoms=false"
                    
                    sh "git add pom.xml"
                    sh "git commit -m 'Update version to ${fullVersion}' || true"
                    sh "git tag -a ${fullVersion} -m 'Release ${fullVersion}'"
                    sh "git push git@github.com:arijhakouna/tpFoyer.git ${fullVersion}"
                    
                    echo "Tag ${fullVersion} created and pushed successfully"
                }
            }
        }

        stage("Clean & Compile") {
            steps {
                echo "Cleaning and compiling the project..."
                sh 'mvn clean compile'
            }
        }

        stage("Unit Tests") {
            steps {
                echo "Running Unit Tests..."
                sh 'mvn test -Dtest="*ServiceTest,*RestControllerTest" -DfailIfNoTests=false'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage("Integration Tests") {
            steps {
                echo "Running Integration Tests..."
                sh 'mvn test -Dtest="*IntegrationTest" -DfailIfNoTests=false'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage("SonarQube") {
            steps {
                echo "Running SonarQube analysis..."
                script {
                    try {
                        withSonarQubeEnv('SonarQubeServer') {
                            echo "SonarQube environment configured successfully"
                            sh 'mvn verify'
                            echo "Maven verify completed"
                            sh 'mvn sonar:sonar -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml'
                            echo "SonarQube analysis submitted"
                        }
                        
                        echo "Waiting for SonarQube quality gate..."
                        timeout(time: 30, unit: 'SECONDS') {
                            def qg = waitForQualityGate abortPipeline: true
                            echo "Quality Gate Status: ${qg.status}"
                        }
                    } catch (Exception e) {
                        echo "Error in SonarQube stage: ${e.getMessage()}"
                        echo "Attempting to continue without quality gate..."
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
            post {
                always {
                    echo "SonarQube stage completed"
                }
            }
        }

        stage("Nexus") {
            steps {
                echo "Deploying to Nexus repository..."
                sh 'mvn deploy -DskipTests'
            }
        }

        stage("Docker Build") {
            steps {
                echo "Building Docker image..."
                script {
                    def version = sh(script: "mvn help:evaluate -Dexpression=project.version -q -DforceStdout", returnStdout: true).trim()
                    def tagVersion = version
                    
                    echo "Using VERSION: ${version}"
                    echo "Using TAG_VERSION: ${tagVersion}"
                    
                    sh """
                    docker build --build-arg VERSION=${version} -t tpfoyer:${tagVersion} .
                    docker tag tpfoyer:${tagVersion} arijhakouna/tpfoyer:${tagVersion}
                    docker login -u arijhakouna -p azerty123
                    docker push arijhakouna/tpfoyer:${tagVersion}
                    """
                }
            }
        }

        stage("Docker Swarm Deploy") {
            steps {
                echo "Deploying with Docker Swarm..."
                script {
                    def tagVersion = sh(script: "mvn help:evaluate -Dexpression=project.version -q -DforceStdout", returnStdout: true).trim()
                    
                    echo "Using DOCKER_TAG: ${tagVersion}"
                    
                    sh 'docker swarm init --advertise-addr 127.0.0.1 2>/dev/null || true'
                    
                    sh 'docker network create --driver overlay --attachable tpfoyer_network 2>/dev/null || true'
                    
                    sh 'docker volume create tpfoyer_mysql_data 2>/dev/null || true'
                    
                    sh 'docker stack rm ${STACK_NAME} 2>/dev/null || true'
                    sh 'sleep 10'
                    
                    sh """
                    export DOCKER_TAG=${tagVersion}
                    docker stack deploy -c docker-compose.swarm.yml ${STACK_NAME}
                    """
                    
                    sh 'sleep 60'

                }
            }
        }

        stage('Swarm Monitoring') {
            steps {
                echo "Monitoring Docker Swarm services..."
                script {
                    sh '''
                    echo "=== Service Status ==="
                    docker service ls
                    
                    echo "=== Stack Services ==="
                    docker stack ps tpfoyer
                    
                    echo "=== Service Logs ==="
                    docker service logs ${STACK_NAME}_app --tail 10
                    docker service logs ${STACK_NAME}_mysql --tail 5
                    '''
                    
                    echo "Application: http://10.148.1.146:8089"
                    echo "MySQL: http://10.148.1.146:3306"
                }
            }
        }

        stage('Swarm Scaling Test') {
            steps {
                echo "Testing Swarm scaling capabilities..."
                script {
                    sh '''
                    echo "Scaling application to 3 replicas..."
                    docker service scale tpfoyer_app=3
                    sleep 20
                    docker service ls
                    docker stack ps tpfoyer
                    '''
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed with result: ${currentBuild.result}"
        }
        success {
            echo "Pipeline succeeded! Application deployed successfully with Docker Swarm"
            echo "Stack name: ${STACK_NAME}"
            echo "Tag version: ${env.TAG_VERSION}"
        }
        failure {
            echo "Pipeline failed! Check the logs for details."
            mail to: 'Arij.Hakouna@esprit.tn',
                 subject: "[Jenkins] ECHEC du pipeline Swarm ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "Le pipeline Docker Swarm a échoué. Consultez les logs Jenkins pour plus de détails."
        }
        unstable {
            mail to: 'Arij.Hakouna@esprit.tn',
                 subject: "[Jenkins] Pipeline Swarm instable ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "Le pipeline Docker Swarm est instable. Consultez les logs Jenkins pour plus de détails."
        }
    }
} 
